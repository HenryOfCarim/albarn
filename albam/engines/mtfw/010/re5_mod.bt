//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: re5_mod.bt
//   Authors: Raq, also special thanks to TheIndra & alphaZomega
//   Version: 2.0
//   Purpose: Parsing Resident evil 5 mesh format
//  Category: Modding
// File Mask: .mod
//  ID Bytes: 4D 4F 44 0
//------------------------------------------------
LittleEndian();
local uint64 i<hidden=true>;
local uint64 j<hidden=true>;
local uint64 mesh_offset<hidden=true>;

struct MODHeader
{
    char id_magic[4];
    ubyte version;
    byte revision;
    ushort num_bones;
    short num_meshes;
    ushort num_materials;
    uint num_vertices;
    uint num_faces;
    uint num_edges;
    uint size_vertex_buffer;
    uint size_vertex_buffer_2;
    uint num_textures;
    uint num_groups;
    uint num_bone_mappings;
    uint offset_bones;
    uint offset_groups;
    uint offset_textures;
    uint offset_meshes;
    uint offset_buffer_vertices;
    uint offset_buffer_vertices_2; // 8 bones per vertex related
    uint offset_buffer_indices;
    uint reserved_01;
    uint reserved_02;
    float sphere_x;
    float sphere_y;
    float sphere_z;
    float sphere_w;
    float box_min_x;
    float box_min_y;
    float box_min_z;
    float box_min_w;
    float box_max_x;
    float box_max_y;
    float box_max_z;
    float box_max_w;
    uint unk_01;
    uint unk_02;
    uint unk_03;
    uint unk_04;
    uint16 unk_05[2];
    uint16 unk_06[2];
    uint16 unk_07[2];
    uint unk_08;
    uint unk_09;
    uint unk_10;
    uint unk_11;
    uint reserved_03;
};

struct Bone
{
	ubyte anim_map_index;
	ubyte parent_index; //255: root
	ubyte mirror_index;
	ubyte palette_index;
	float unk_01;
	float parent_distance;
	float location_x;
	float location_y;
	float location_z;
};

struct Matrix4x4
{
    float matrix[16];
};

struct BoneAnimMapping
{
	ubyte a[256];
} ;

 struct BoneMapping
{
    uint unk_01;
    ubyte values[32];
} ;
 
struct  Group
{
    uint group_index;
    float unk_02;
    float unk_03;
    float unk_04;
    float unk_05;
    float unk_06;
    float unk_07;
    float unk_08;
};

struct TextureData {
        char path[64];
};

struct MaterialData{
    ushort unk_01;
    struct {
        uint16 unk_flag_01 : 1;
        uint16 unk_flag_02 : 1;
        uint16 unk_flag_03 : 1;
        uint16 unk_flag_04 : 1;
        uint16 unk_flag_05 : 1;
        uint16 unk_flag_06 : 1;
        uint16 unk_flag_07 : 1;
        uint16 unk_flag_08 : 1;
        uint16 unk_flag_09 : 1;
        uint16 unk_flag_10 : 1;
        uint16 unk_flag_11 : 1;
        uint16 flag_8_bones_per_vertex : 1;
        uint16 unk_flag_13 : 1;
        uint16 unk_flag_14 : 1;
        uint16 unk_flag_15 : 1;
        uint16 unk_flag_16 : 1;
    } unk_flag;
    ushort unk_02[10];
    uint texture_indices[8];
    float unk_12[26];
};

struct ModMesh
{
    ushort group_index;
    ushort material_index;
    ubyte constant; //always 1
    ubyte level_of_detail;
    ubyte unk_01;
    ubyte vertex_format;
    ubyte vertex_stride;
    ubyte vertex_stride_2;
    ubyte unk_03;
    ubyte unk_flags;
    ushort num_vertices;
    ushort vertex_position_end;
    uint vertex_position_2;
    uint vertex_offset;
    uint unk_05;
    uint face_position;
    uint num_faces;
    uint face_offset;
    ubyte unk_06;
    ubyte unk_07;
    ushort vertex_position;
    ubyte vertex_num_groups;
    ubyte bone_palette_index;
    ubyte unk_08;
    ubyte unk_09;
    ushort unk_10;
    ushort unk_11;
};

struct Vtx0
{
    short position_x;
    short position_y;
    short position_z;
    ubyte normal_x;
    ubyte normal_y;
    ubyte normal_z;
    ubyte normal_w;
    ubyte tangent_x;
    ubyte tangent_y;
    ubyte tangent_z;
    ubyte tangent_w;
    ushort uv_x;
    ushort uv_y;
    ushort uv2_x;
    ushort uv2_y;
    ushort uv3_x;
    ushort uv3_y;
};

struct Vtx
{
    short position_x;
    short position_y;
    short position_z;
    short position_w;
    struct {
        ubyte index_1;
        ubyte index_2;
        ubyte index_3;
        ubyte index_4;
    } bone_indices;
    struct {
        ubyte index_1;
        ubyte index_2;
        ubyte index_3;
        ubyte index_4;
    } weight_values;
    ubyte normal_x;
    ubyte normal_y;
    ubyte normal_z;
    ubyte normal_w;
    ubyte tangent_x;
    ubyte tangent_y;
    ubyte tangent_z;
    ubyte tangent_w;
    hfloat uv_x;
    hfloat uv_y;
    ushort uv2_x;
    ushort uv2_y;
};

struct Vtx5
{
    short position_x;
    short position_y;
    short position_z;
    short position_w;
    struct {
        ubyte index_1;
        ubyte index_2;
        ubyte index_3;
        ubyte index_4;
        ubyte index_5;
        ubyte index_6;
        ubyte index_7;
        ubyte index_8;
    } bone_indices;
    struct {
        ubyte index_1;
        ubyte index_2;
        ubyte index_3;
        ubyte index_4;
        ubyte index_5;
        ubyte index_6;
        ubyte index_7;
        ubyte index_8;
    } weight_values;
    ubyte normal_x;
    ubyte normal_y;
    ubyte normal_z;
    ubyte normal_w;
    ushort uv_x;
    ushort uv_y;
};

struct MeshData
{
    uint boneID;
    float unk_01[3];
    float bssphere[4];
    float bboxMin[4];
    float bboxMax[4];
    float oabb_matrix[16];
    float oabb_dimension[4];
};

struct tangent// only guess
{ 
    ubyte tangent_x;
    ubyte tangent_y;
    ubyte tangent_z;
    ubyte tangent_w;
};

struct unk_8_block_00
{
    uint16 face_id;
    uint16 unk_01;
};

struct unk_8_block_01
{
    uint16 unk_01;
    uint16 unk_02;
    uint32 unk_03[3];
};

struct unk_8_block_02
{
    uint16 unk_00[4];
};

struct unk_buff_2
{
    ubyte unk_00[4];
    ubyte unk_01[4];
};

//Parsing//
MODHeader header<fgcolor=0x008000>;
if (header.unk_08 > 0)
{
    unk_8_block_00 unk_block_00[header.unk_10]<fgcolor=0x808000>; // shading vtx faces
    unk_8_block_01 unk_block_01[header.unk_09]<fgcolor=0x800080>; // probably uv
    unk_8_block_02 unk_block_02[header.unk_08]<fgcolor=0x108010>; //probably normals
};
if (header.num_bones > 0)
{
    FSeek(header.offset_bones);
    Bone bones[header.num_bones]<fgcolor=0x008080>; 
    Matrix4x4 local_transform[header.num_bones]<bgcolor=0x788673>;
    Matrix4x4 world_transform[header.num_bones]<bgcolor=0x3d340c>;
    BoneAnimMapping bone_anim_maping<bgcolor=0x4d1220>;
    BoneMapping bones_mapping[header.num_bone_mappings];
};
FSeek(header.offset_groups);
Group groups[header.num_groups];
FSeek(header.offset_textures);
TextureData textures[header.num_textures]<fgcolor=0x000ff7f>;
MaterialData materials[header.num_materials]<fgcolor=0xaf7500>;

struct{
    FSeek(header.offset_meshes);
    mesh_offset = FTell();
    for(i=0; i<(header.num_meshes); i++) {
        FSeek(mesh_offset);
        ModMesh mesh<fgcolor=0x00aaff>;
        mesh_offset = FTell();
        FSeek(header.offset_buffer_indices + mesh[i].face_offset * 2 + mesh[i].face_position * 2);
        struct{
            for(j=0; j<(mesh.num_faces); j++)
            uint16 idx;
        }mesh_indices<fgcolor=0xD1CE23>;
        FSeek(header.offset_buffer_vertices + (mesh[i].vertex_position * mesh[i].vertex_stride) + mesh[i].vertex_offset);
        struct {
            for(j=0; j<(mesh.num_vertices); j++){
                if (mesh.vertex_format == 0) {
                    Vtx0 vertex0<fgcolor=cRed>;
                }
                else if (mesh.vertex_format <= 4) {
                    Vtx vertex<fgcolor=cPurple>;
                }
                else{
                    Vtx5 vertex5<fgcolor=0xD1CE00>;
                };
            };
        }vertices;
    };   
}meshes;

FSeek(mesh_offset);
uint NumMeshData<fgcolor=cRed>;
MeshData mesh_data[NumMeshData]<fgcolor=cGreen>;

if (header.size_vertex_buffer_2 > 0){
    FSeek(header.offset_buffer_vertices_2);
    struct
    {
        unk_buff_2 unk_buffer[(header.size_vertex_buffer_2/8)];
        //unk_buff_2 unk_buffer[30908];
        //unk_buff_2 unk_buffer[44632];
        //ubyte ida[header.size_vertex_buffer_2];
    }buffer_2<bgcolor=cGreen>;
};

//FSeek(header.offset_buffer_indices);
//struct
// {
//    ushort index1;
//} indexes[header.num_faces -1]<fgcolor=cYellow>; //- 2 for modified files