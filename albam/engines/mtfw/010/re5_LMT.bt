//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: re5_LMT.bt
//   Authors: HenryVIII
//   Version: 0.1
//   Purpose: Parsing Resident evil 5 animation format
//  Category: Modding
// File Mask: lmt
//  ID Bytes: 4C 4D 54 00
//   History: 
//------------------------------------------------
local uint64 i<hidden=true>;
local uint64 j<hidden=true>;
local int64 savepos <hidden=true>;

struct LMTHeader
{
    char id_magic[4];
    ushort version;
    ushort num_blocks;
    uint block_offsets[num_blocks];
};

struct FrameBlock
{
    uint ofs_frame; //Offset
    uint num_bones; //BoneCount
    uint num_frames; //FrameCount
    uint unk_01[25]; //LoopFrame (one uint)
    uint count_01;
    uint ofs_buffer;
    uint unk_02[16];
    uint ofc_02;
};

struct FrameData
{
    ubyte buffer_type;//BufferType
    ubyte usage;//Usage
    ubyte joint_type;//JoinType
    ubyte bone_index;//boneID
    float unk_01;// weight ?
    uint buffer_size;//BufferSize
    uint buffer_offset;//BufferOffset
    float unk_reference_data[4];//BufferRef
};


LMTHeader lmt_header<fgcolor=cYellow>;
struct
{
    for (i=0; i<lmt_header.num_blocks; i++)
    {
            if (lmt_header.block_offsets[i] > 0)
            {
                FSeek(lmt_header.block_offsets[i]);
                struct
                {
                    FrameBlock frame_block<fgcolor=cGreen>;
                    struct {
                        FSeek(frame_block.ofs_frame);
                        savepos = 0;
    
                        for(j=0; j<frame_block.num_bones; j++)
                        {
                            if (savepos>0)
                            {
                                FSeek(savepos);    
                            };
                            FrameData frame_data<fgcolor=cGreen>;
                            savepos = FTell();
                            if(frame_data.buffer_size>0)
                            {
                                FSeek(frame_data.buffer_offset);
                                struct {
                                    ubyte data[frame_data.buffer_size];
                                }frame_data_body<fgcolor=cRed>;
                            };
                        };
                    }frames;
                }anim_block;
            };
    };
}anim_blocks;