//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: re5_LMT.bt
//   Authors: HenryVIII
//   Version: 0.4
//   Purpose: Parsing Resident evil 5 animation format
//  Category: Modding
// File Mask: lmt
//  ID Bytes: 4C 4D 54 00
//   History: 
//------------------------------------------------

struct FrameData
{
    ubyte    buffer_type;//BufferType
    ubyte    usage;//Usage
    ubyte    joint_type;//JoinType
    ubyte    bone_index;//boneID
    float    unk_01;// weight ?
    uint     buffer_size;//BufferSize
    uint     buffer_offset;//BufferOffset
    float    unk_reference_data[4];//BufferRef
    local int64 checkpoint = FTell();
    if(buffer_size>0)
    {
        FSeek(buffer_offset);
        struct
        {
            ubyte   data[buffer_size];
        }frame_data_body<fgcolor=cRed>;
    };
    FSeek(checkpoint);
    
};

struct Attack
{
    uint unk_00;
    uint start_time;
};

struct AttackSFX
{
    uint sfx_id;
    uint start_time;
};

struct SFX
{
    uint16 sfx_id;
};


struct Track
{
    uint     ofs_frame; //Offset
    uint     num_bones; //BoneCount
    uint     num_frames; //FrameCount
    float    unk_01[9]; //LoopFrame (one uint)
    uint     unk_02[16]; 
    uint     count_01;
    uint     ofs_buffer_01;
    //uint16 unk_02[6];
    SFX      sfx[32]<fgcolor=0xa77856>;
    //uint16 unk_03[24];
    uint     count_02;
    uint     ofs_buffer_02;
    local uint64 savepos = FTell();
    if (ofs_buffer_01>0)
    {
        FSeek(ofs_buffer_01);
        Attack   atk_hit[count_01]<fgcolor=0x577806>;
    };
    if (ofs_buffer_02>0)
    {
        FSeek(ofs_buffer_02);
        AttackSFX    atk_sfx[count_02]<fgcolor=0x977806>;
    }   
    FSeek(savepos);
    struct
    {
        FSeek(ofs_frame);
        FrameData   frame_data[num_bones]<optimize=false,fgcolor=cGreen>;
    }frames;
    FSeek(savepos);
};

typedef struct
{
    uint offset<fgcolor=0x855080>;
    if (offset > 0)
    {
        local uint64 checkpoint = FTell();
        FSeek(offset);
        Track    track<fgcolor=0xabbb82>;
        FSeek(checkpoint);
    };
}AnimBlock;

struct LMTHeader
{
    char     id_magic[4];
    ushort   version;
    ushort   num_blocks;
};


LMTHeader lmt_header<fgcolor=cYellow>;
AnimBlock anim_block[lmt_header.num_blocks]<optimize=false>;