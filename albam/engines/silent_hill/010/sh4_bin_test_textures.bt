//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();
local uint64 i<hidden=true>;
local uint64 j<hidden=true>;
local uint64 k<hidden=true>;
local uint64 savepoint<hidden=true>;
local uint64 checkpoint<hidden=true>;
local uint64 tex_header_start<hidden=true>;

struct TexSize
{
    uint32 width;
    uint32 height;
    uint16 unk_00;
    uint16 unk_01;
    uint32 unk_02;
    
};

struct TexOffset
{
    uint16 unk_00;
    uint16 unk_01;
    uint32 tex_num;
    uint32 unk_03;
    uint32 tex_header_ofs;
};

struct TxHeader
{
    uint32 nulls[8];
    uint32 width;
    uint32 height;
    char type[4];
    uint32 unk_num;
    uint32 mips_size[8];
    uint32 mips_ofs[unk_num];
    uint32 unk_num_00;
};

typedef struct
{
    uint16 ida<fgcolor=0x008000>;
    uint16 idb<fgcolor=0x00c0c0>;
    if(ida == idb)
    {
        uint32 nulls[3];
        uint32 unk_tx_block_00[ida]<fgcolor=0x808000>;
        uint32 unk_tx_block_01[idb]<fgcolor=0x308090>;
        for(i=0; i<ida; i++)
        {
            FSeek(savepoint+unk_tx_block_00[i]);
            TexSize unk_block_00<fgcolor=0x80cc00>;
        };
        for(i=0; i<idb; i++)
        {
            FSeek(savepoint+unk_tx_block_01[i]);
            checkpoint = FTell();
            TexOffset tex_offset<fgcolor=0x8050c0>;
            FSeek(checkpoint + tex_offset[i].tex_header_ofs);
            tex_header_start = FTell();
            for(j=0; j<tex_offset[i].tex_num; j++)
            {
                TxHeader texture_header<fgcolor=0x808000>;
            };
            struct
            {
                for(j=0; j<texture_header[i].unk_num; j++)
                {
                    FSeek(tex_header_start+texture_header[i].mips_ofs[j]);
                    uint32 mipmap<fgcolor=0x2020a0>;     
                };
            }mipmaps;
        };
    };
}DataBlock;


//parsing
uint32 num_ofs<fgcolor=cRed>;
uint32 offsets[num_ofs];

for (k=0; k<num_ofs; k++)
{
    FSeek(offsets[k]);
    savepoint = FTell();
    DataBlock data_block;
};