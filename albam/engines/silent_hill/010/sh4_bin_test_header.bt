//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: HenryVIII
//   Version: 0.2
//   Purpose: Parsing Silent Hill 4 data container
//  Category: Modding
// File Mask: .bin
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();
local uint64 savepoint<hidden=true>;
local uint64 checkpoint<hidden=true>;
local uint64 index_start<hidden=true>;
local uint64 vtx_start<hidden=true>;
local uint64 mesh_data_start<hidden=true>;
local uint64 mesh_block_num<hidden=true>;
local uint64 cur_mesh_block_num<hidden=true>;
local uint64 i<hidden=true>;
local uint64 j<hidden=true>;
local uint64 k<hidden=true>;


struct MeshHeader
{
    uint32 unk_id;// should be 03 00 ff ff
    uint32 unk_num;
    uint32 matrix_1_ofc;
    uint32 matrix_1_num;
    uint32 matrix_1_data_ofc;
    uint32 matrix_2_num;
    uint32 matrix_2_data_ofc;
    uint32 matrix_2_ofc;
    uint32 num_meshes;
    uint32 mesh_ofc;
    uint32 unk_00;
    uint32 block_size;// size of linked meshes
    uint32 unk_num_04;
    uint32 unk_ofc_04;
    uint32 unk_num_05;
    uint32 unk_ofc_05;
    uint32 unk_val;
    uint32 unk_num_06;
    uint32 unk_ofc_06;
    uint32 unk_num_07;
    uint32 unk_ofc_07;
    uint32 unk_04[3];
    uint32 floats_ofc;
    uint16 unk_05[6];
    uint32 unk_ofc;
    uint32 unk_06[3];
};

struct Matrix4x4
{
    float val[16];
};

struct VtxBlock
{
    float x;// probably vertex location
    float y;
    float z;
    float unk_00[13];
};

struct UnkInts
{
    uint32 unk_00[20];
};

struct UnkBlock02
{
    uint32 unk_00[3];
};

struct UnkBlock03
{
    uint32 unk_00;
};

struct UnkBlock04
{
    uint32 unk_00[2];
};

struct UnkBlock05
{
    uint16 unk_00[3];
};

struct UnkBlock06
{
    uint16 unk_00[5];
};

struct UnkAdrsBlock
{
    uint32 unk_num;
    uint32 unk_ofc;
};

struct UnkAdrsBlockBody
{
    uint16 unk_num[4];
};


struct UnkFloats00
{
    float unk_float[32];
};

struct MeshBlock
{
  uint32 mesh_size<fgcolor=0x103090>;
  uint32 unk_null_00;
  uint32 unk_ofc_00;
  uint32 unk_num_02;
  uint32 unk_00[14];
  float unk_float[17]<fgcolor=0x108010>;
  uint32 unk_01[12];
  uint32 unk_nulls[16];
  uint32 unk_num_indexes<fgcolor=cRed>;
  uint32 unk_num_floats;
  uint32 unk_num_00;
  uint32 unk_num_01;
  uint32 unk_ofc_01;
  uint32 unk_ofc_02;
  uint32 unk_ofc_03;
  VtxBlock unk_floats[unk_num_floats]<fgcolor=0x008080>;  
  uint16 unk_indexes[unk_num_indexes]<fgcolor=0x805010>;
  uint32 unk_ints[unk_num_01]<fgcolor=0x105080>;
};

struct TestMeshBlock
{
    uint32 mesh_block_size<fgcolor=0x103090>;
    uint32 unk_null_00;
    uint32 unk_ofc_00;
    uint32 unk_00;
    uint32 unk_01;
    uint32 unk_02;
    uint32 unk_ofc_01; // offset
    uint32 unk_04;
    uint32 unk_ofc_02;
    uint32 unk_06;
    uint32 unk_ofc_03;
    uint32 unk_08;
    uint32 unk_09;
    uint32 unk_10;
    uint32 unk_11;
    uint32 unk_ofc_02;
    uint16 unk_num_01;
    uint16 unk_num_13[15];
    float unk_floats[8]<fgcolor=0x10cc90>;
};

struct MeshDataHeader
{
    uint32 nulls[8];
    uint32 start_ofc<fgcolor=cRed>;//wtf? why floats use it
    uint32 nulls_00[7];
    uint32 num_indices<fgcolor=0x5050b0>;
    uint32 num_floats<fgcolor=0x50c0c0>;
    uint32 unk_00;
    uint32 unk_01;
    uint32 indices_ofc;
    uint32 unk_03;//offset to the beginning of floats ?
    uint32 unk_00_ofc;
};

struct MeshInfo
{
    uint32 unk_num<fgcolor=0x80a010>;
    uint32 unk_01;
    uint32 unk_02;
    //MeshDataHeader unk_data[unk_num];
};


//parsing
uint32 num_ofc<fgcolor=cRed>;
uint32 ofc_00[num_ofc]<fgcolor=0x008000>;
FSeek(ofc_00[0]);
savepoint = FTell();
MeshHeader mesh_header<fgcolor=0x808000>;
if (mesh_header.unk_id == 4294901763)
{
    //matrices 1
    FSeek(mesh_header.matrix_1_ofc + savepoint);
    Matrix4x4 matrices[mesh_header.matrix_1_num]<fgcolor=cGreen>;
    //matrices 2
    FSeek(mesh_header.matrix_2_ofc + savepoint);
    Matrix4x4 matrices_2[mesh_header.matrix_2_num]<fgcolor=0x303090>;
    //data that uses same num as for matrices
    FSeek(mesh_header.matrix_1_data_ofc + savepoint);
    ubyte unk_matrix_1_data[mesh_header.matrix_1_num]<fgcolor=cYellow>;
    
    FSeek(mesh_header.matrix_2_data_ofc + savepoint);
    uint16 unk_matrix_2_data[mesh_header.matrix_2_num]<fgcolor=cBlue>;
    
    FSeek(mesh_header.unk_ofc_04 + savepoint);
    UnkBlock03 unk_block_04[mesh_header.unk_num_04]<fgcolor=0x8030a0>;
    
    FSeek(mesh_header.unk_ofc_05 + savepoint);
    UnkBlock04 unk_block_05[mesh_header.unk_num_05]<fgcolor=0xa05080>;
    
    FSeek(mesh_header.unk_ofc_06 + savepoint);
    UnkBlock05 unk_block_06[mesh_header.unk_num_06]<fgcolor=0xa0a080>;
    
    FSeek(mesh_header.unk_ofc_07 + savepoint);
    checkpoint = FTell();
    struct{
        for(i=0; i<(mesh_header.unk_num_07); i++)
        {
            FSeek(checkpoint);
            UnkAdrsBlock unk_adrs_block_header<fgcolor=0xa050c0>;
            checkpoint = FTell();
            FSeek(unk_adrs_block_header[i].unk_ofc + savepoint);
            struct {
                for(j=0; j<(unk_adrs_block_header[i].unk_num); j++)
                {
                    UnkAdrsBlockBody unk_adrs_body<fgcolor=0xc010c0>;
                };
            }adrs_body;
    
        };
    }unk_data_block_07;
    
    // unk floats
    FSeek(mesh_header.floats_ofc + savepoint);
    UnkFloats00 unk_floats<fgcolor=0x80a010>;
    // meshes
    FSeek(mesh_header.mesh_ofc + savepoint);
    savepoint = FTell();
    mesh_block_num = 0;
    
    for(i=0; i<(mesh_header.num_meshes); i++)
    {
        FSeek(savepoint);
        savepoint = FTell();
        //MeshBlock mesh_block;  
        TestMeshBlock mesh_block;
        FSeek(savepoint + mesh_block[i].unk_ofc_02);
        //Block with number of mesh parts
        UnkBlock06 unk_mesh_block_01<fgcolor=0x713176>;
        //Block with vertices and indicies 
        FSeek(savepoint + mesh_block[i].unk_ofc_00);
        MeshInfo mesh_info;
        mesh_data_start = FTell();
        mesh_block_num += mesh_info[i].unk_num;
        cur_mesh_block_num = mesh_block_num - mesh_info[i].unk_num;
        for (j=0; j<(mesh_info[i].unk_num); j++)
        {   
            FSeek(mesh_data_start);
            index_start = FTell();
            vtx_start = FTell() + 32;
            MeshDataHeader mesh_data_header;
            mesh_data_start = FTell();
            //
            FSeek(vtx_start + mesh_data_header[cur_mesh_block_num + j].unk_03);
            //vertex float
            struct
            {
                for(k=0; k<(mesh_data_header[cur_mesh_block_num + j].num_floats); k++)
                {
                    VtxBlock vtx_data<fgcolor=0xa0a080>;
                };
            }vertices;
            // indices ?
            FSeek(index_start + mesh_data_header[cur_mesh_block_num + j].indices_ofc);
            struct
            {
                for(k=0; k<(mesh_data_header[cur_mesh_block_num+j].num_indices); k++)
                {
                    uint16 index<fgcolor=0x10c0c0>;
                };
            }indices;
            //unk int data
            FSeek(index_start + mesh_data_header[cur_mesh_block_num + j].unk_00_ofc);
            UnkInts unk_ints<fgcolor=0xc02060>;
        };
        savepoint = savepoint + mesh_block[i].mesh_block_size;
    };
};
